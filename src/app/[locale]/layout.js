import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { NextIntlClientProvider, hasLocale } from "next-intl";
import { getMessages } from "next-intl/server";
import { routing } from "@/i18n/routing";
import NotFound from "../not-found";
import { Providers } from "./client/queryClientProivder";
import { AuthProvider } from "../context/AuthContext";
import ConditionalLayout from "./components/ConditionalLayout ";
import { RouteGuard } from "./components/RouteGuard";
import { Toaster } from 'react-hot-toast';
import { StoreProvider } from "../context/StoreContext";
import { CheckoutProvider } from "../context/CheckoutContext";


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Herafy",
  description: "Generated by create next app",
  icons: {
    icon: "/1.11.svg",
  },
};

export default async function RootLayout({ params, children }) {
  const resolvedParams = await params;

  if (!hasLocale(routing.locales, resolvedParams.locale)) {
    return <NotFound />;
  }

  const messages = await getMessages();

  return (
    <html
      lang={resolvedParams.locale}
      dir={resolvedParams.locale === "ar" ? "rtl" : "ltr"}
      className={`${geistSans.variable} ${geistMono.variable}`}
    >
      <body>
        <NextIntlClientProvider
          locale={resolvedParams.locale}
          messages={messages}
        >
          <Providers>
            <AuthProvider>
              <StoreProvider>
              <CheckoutProvider>
              <RouteGuard>
              <Toaster
                  position="top-center"
                  toastOptions={{
                    success: {
                      duration: 3000,
                    },
                    error: {
                      duration: 5000,
                    },
                  }}
                />
                <ConditionalLayout locale={resolvedParams.locale}>
                  {children}
                </ConditionalLayout>
              </RouteGuard>
              </CheckoutProvider>
            </StoreProvider>
          </AuthProvider>
        </Providers>
      </NextIntlClientProvider>
    </body>
  </html>
  );
}
